// Code generated by protoc-gen-go. DO NOT EDIT.
// source: execution.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommitBlockStatus int32

const (
	// The block is persisted.
	CommitBlockStatus_SUCCEEDED CommitBlockStatus = 0
	// Something went wrong.
	CommitBlockStatus_FAILED CommitBlockStatus = 1
)

var CommitBlockStatus_name = map[int32]string{
	0: "SUCCEEDED",
	1: "FAILED",
}

var CommitBlockStatus_value = map[string]int32{
	"SUCCEEDED": 0,
	"FAILED":    1,
}

func (x CommitBlockStatus) String() string {
	return proto.EnumName(CommitBlockStatus_name, int32(x))
}

func (CommitBlockStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{0}
}

type ExecuteBlockRequest struct {
	// The list of transactions from consensus.
	Transactions []*SignedTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// Id of the parent block.
	// We're going to use a special GENESIS_BLOCK_ID constant defined in
	// crypto::hash module to refer to the block id of the Genesis block, which is
	// executed in a special way.
	ParentBlockId []byte `protobuf:"bytes,2,opt,name=parent_block_id,json=parentBlockId,proto3" json:"parent_block_id,omitempty"`
	// Id of the current block.
	BlockId              []byte   `protobuf:"bytes,3,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteBlockRequest) Reset()         { *m = ExecuteBlockRequest{} }
func (m *ExecuteBlockRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteBlockRequest) ProtoMessage()    {}
func (*ExecuteBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{0}
}

func (m *ExecuteBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteBlockRequest.Unmarshal(m, b)
}
func (m *ExecuteBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteBlockRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteBlockRequest.Merge(m, src)
}
func (m *ExecuteBlockRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteBlockRequest.Size(m)
}
func (m *ExecuteBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteBlockRequest proto.InternalMessageInfo

func (m *ExecuteBlockRequest) GetTransactions() []*SignedTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *ExecuteBlockRequest) GetParentBlockId() []byte {
	if m != nil {
		return m.ParentBlockId
	}
	return nil
}

func (m *ExecuteBlockRequest) GetBlockId() []byte {
	if m != nil {
		return m.BlockId
	}
	return nil
}

// Result of transaction execution.
type ExecuteBlockResponse struct {
	// Root hash of the ledger after applying all the transactions in this
	// block.
	RootHash []byte `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// The execution result of the transactions. Each transaction has a status
	// field that indicates whether it should be included in the ledger once the
	// block is committed.
	Status []*VMStatus `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
	// The corresponding ledger version when this block is committed.
	Version uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// If set, this field designates that if this block is committed, then the
	// next epoch will start immediately with the included set of validators.
	Validators           *ValidatorSet `protobuf:"bytes,4,opt,name=validators,proto3" json:"validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ExecuteBlockResponse) Reset()         { *m = ExecuteBlockResponse{} }
func (m *ExecuteBlockResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteBlockResponse) ProtoMessage()    {}
func (*ExecuteBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{1}
}

func (m *ExecuteBlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteBlockResponse.Unmarshal(m, b)
}
func (m *ExecuteBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteBlockResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteBlockResponse.Merge(m, src)
}
func (m *ExecuteBlockResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteBlockResponse.Size(m)
}
func (m *ExecuteBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteBlockResponse proto.InternalMessageInfo

func (m *ExecuteBlockResponse) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *ExecuteBlockResponse) GetStatus() []*VMStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ExecuteBlockResponse) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ExecuteBlockResponse) GetValidators() *ValidatorSet {
	if m != nil {
		return m.Validators
	}
	return nil
}

type CommitBlockRequest struct {
	// The ledger info with signatures from 2f+1 validators. It contains the id
	// of the block consensus wants to commit. This will cause the given block
	// and all the uncommitted ancestors to be committed to storage.
	LedgerInfoWithSigs   *LedgerInfoWithSignatures `protobuf:"bytes,1,opt,name=ledger_info_with_sigs,json=ledgerInfoWithSigs,proto3" json:"ledger_info_with_sigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CommitBlockRequest) Reset()         { *m = CommitBlockRequest{} }
func (m *CommitBlockRequest) String() string { return proto.CompactTextString(m) }
func (*CommitBlockRequest) ProtoMessage()    {}
func (*CommitBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{2}
}

func (m *CommitBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitBlockRequest.Unmarshal(m, b)
}
func (m *CommitBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitBlockRequest.Marshal(b, m, deterministic)
}
func (m *CommitBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitBlockRequest.Merge(m, src)
}
func (m *CommitBlockRequest) XXX_Size() int {
	return xxx_messageInfo_CommitBlockRequest.Size(m)
}
func (m *CommitBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitBlockRequest proto.InternalMessageInfo

func (m *CommitBlockRequest) GetLedgerInfoWithSigs() *LedgerInfoWithSignatures {
	if m != nil {
		return m.LedgerInfoWithSigs
	}
	return nil
}

type CommitBlockResponse struct {
	Status               CommitBlockStatus `protobuf:"varint,1,opt,name=status,proto3,enum=execution.CommitBlockStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CommitBlockResponse) Reset()         { *m = CommitBlockResponse{} }
func (m *CommitBlockResponse) String() string { return proto.CompactTextString(m) }
func (*CommitBlockResponse) ProtoMessage()    {}
func (*CommitBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{3}
}

func (m *CommitBlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitBlockResponse.Unmarshal(m, b)
}
func (m *CommitBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitBlockResponse.Marshal(b, m, deterministic)
}
func (m *CommitBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitBlockResponse.Merge(m, src)
}
func (m *CommitBlockResponse) XXX_Size() int {
	return xxx_messageInfo_CommitBlockResponse.Size(m)
}
func (m *CommitBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitBlockResponse proto.InternalMessageInfo

func (m *CommitBlockResponse) GetStatus() CommitBlockStatus {
	if m != nil {
		return m.Status
	}
	return CommitBlockStatus_SUCCEEDED
}

// Ask Execution service to execute and commit a chunk of contiguous
// transactions. All the transactions in this chunk should belong to the same
// epoch E. If the caller has a list of transactions that span two epochs, it
// should split the transactions.
type ExecuteChunkRequest struct {
	TxnListWithProof     *TransactionListWithProof `protobuf:"bytes,1,opt,name=txn_list_with_proof,json=txnListWithProof,proto3" json:"txn_list_with_proof,omitempty"`
	LedgerInfoWithSigs   *LedgerInfoWithSignatures `protobuf:"bytes,2,opt,name=ledger_info_with_sigs,json=ledgerInfoWithSigs,proto3" json:"ledger_info_with_sigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ExecuteChunkRequest) Reset()         { *m = ExecuteChunkRequest{} }
func (m *ExecuteChunkRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteChunkRequest) ProtoMessage()    {}
func (*ExecuteChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{4}
}

func (m *ExecuteChunkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteChunkRequest.Unmarshal(m, b)
}
func (m *ExecuteChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteChunkRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteChunkRequest.Merge(m, src)
}
func (m *ExecuteChunkRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteChunkRequest.Size(m)
}
func (m *ExecuteChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteChunkRequest proto.InternalMessageInfo

func (m *ExecuteChunkRequest) GetTxnListWithProof() *TransactionListWithProof {
	if m != nil {
		return m.TxnListWithProof
	}
	return nil
}

func (m *ExecuteChunkRequest) GetLedgerInfoWithSigs() *LedgerInfoWithSignatures {
	if m != nil {
		return m.LedgerInfoWithSigs
	}
	return nil
}

// Either all transactions are successfully executed and persisted, or nothing
// happens.
type ExecuteChunkResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteChunkResponse) Reset()         { *m = ExecuteChunkResponse{} }
func (m *ExecuteChunkResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteChunkResponse) ProtoMessage()    {}
func (*ExecuteChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{5}
}

func (m *ExecuteChunkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteChunkResponse.Unmarshal(m, b)
}
func (m *ExecuteChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteChunkResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteChunkResponse.Merge(m, src)
}
func (m *ExecuteChunkResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteChunkResponse.Size(m)
}
func (m *ExecuteChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteChunkResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("execution.CommitBlockStatus", CommitBlockStatus_name, CommitBlockStatus_value)
	proto.RegisterType((*ExecuteBlockRequest)(nil), "execution.ExecuteBlockRequest")
	proto.RegisterType((*ExecuteBlockResponse)(nil), "execution.ExecuteBlockResponse")
	proto.RegisterType((*CommitBlockRequest)(nil), "execution.CommitBlockRequest")
	proto.RegisterType((*CommitBlockResponse)(nil), "execution.CommitBlockResponse")
	proto.RegisterType((*ExecuteChunkRequest)(nil), "execution.ExecuteChunkRequest")
	proto.RegisterType((*ExecuteChunkResponse)(nil), "execution.ExecuteChunkResponse")
}

func init() { proto.RegisterFile("execution.proto", fileDescriptor_776e2c5022e94aef) }

var fileDescriptor_776e2c5022e94aef = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x8e, 0xd2, 0x40,
	0x14, 0xc6, 0x29, 0xbb, 0x61, 0x97, 0x81, 0x15, 0x18, 0xd4, 0x54, 0xd4, 0x5d, 0xd2, 0x0b, 0x25,
	0x26, 0x5b, 0x22, 0x78, 0xe9, 0x8d, 0x0b, 0x35, 0x12, 0x71, 0xa3, 0xc5, 0x3f, 0x89, 0x37, 0xcd,
	0x14, 0x06, 0x3a, 0xb1, 0xed, 0xd4, 0x99, 0x53, 0x64, 0x2f, 0x7d, 0x09, 0x5f, 0xc2, 0x27, 0xf0,
	0xed, 0x4c, 0xff, 0x50, 0xda, 0x15, 0x6e, 0xbc, 0x69, 0xd2, 0x73, 0xbe, 0xf9, 0xe6, 0x37, 0xdf,
	0x99, 0x16, 0x35, 0xe8, 0x86, 0xce, 0x43, 0x60, 0xdc, 0xd7, 0x03, 0xc1, 0x81, 0xe3, 0x6a, 0x56,
	0xe8, 0xb4, 0x5c, 0xba, 0x58, 0x51, 0x61, 0x31, 0x7f, 0xc9, 0x93, 0x6e, 0xa7, 0x05, 0x82, 0xf8,
	0x92, 0xcc, 0x77, 0x0b, 0x3a, 0xed, 0x35, 0x71, 0xd9, 0x82, 0x00, 0x17, 0x96, 0xa4, 0x90, 0x16,
	0x1b, 0x6b, 0xcf, 0xa2, 0x42, 0x70, 0x21, 0x93, 0x82, 0xf6, 0x4b, 0x41, 0x6d, 0x23, 0x76, 0xa6,
	0x57, 0x2e, 0x9f, 0x7f, 0x33, 0xe9, 0xf7, 0x90, 0x4a, 0xc0, 0x2f, 0x51, 0x3d, 0x67, 0x29, 0x55,
	0xa5, 0x7b, 0xd4, 0xab, 0x0d, 0x54, 0x1d, 0x6e, 0x02, 0x2a, 0xf5, 0x19, 0x5b, 0xf9, 0x74, 0xf1,
	0x71, 0x27, 0x30, 0x0b, 0x6a, 0xfc, 0x04, 0x35, 0x02, 0x22, 0xa8, 0x0f, 0x96, 0x1d, 0x99, 0x5a,
	0x6c, 0xa1, 0x96, 0xbb, 0x4a, 0xaf, 0x6e, 0x9e, 0x25, 0xe5, 0x78, 0xab, 0xc9, 0x02, 0x3f, 0x40,
	0xa7, 0x99, 0xe0, 0x28, 0x16, 0x9c, 0xd8, 0x49, 0x4b, 0xfb, 0xad, 0xa0, 0xbb, 0x45, 0x30, 0x19,
	0x70, 0x5f, 0x52, 0xfc, 0x10, 0x55, 0x05, 0xe7, 0x60, 0x39, 0x44, 0x3a, 0xaa, 0x12, 0x2f, 0x3a,
	0x8d, 0x0a, 0x6f, 0x88, 0x74, 0xf0, 0x53, 0x54, 0x91, 0x40, 0x20, 0x94, 0x6a, 0x39, 0x06, 0x6e,
	0xa4, 0xc0, 0x9f, 0xdf, 0xcd, 0xe2, 0xb2, 0x99, 0xb6, 0xb1, 0x8a, 0x4e, 0xd6, 0x54, 0x48, 0xc6,
	0xfd, 0x78, 0xe3, 0x63, 0x73, 0xfb, 0x8a, 0x87, 0x08, 0x65, 0xc9, 0x49, 0xf5, 0xb8, 0xab, 0xf4,
	0x6a, 0x83, 0xf6, 0xd6, 0x66, 0xdb, 0x98, 0x51, 0x30, 0x73, 0x32, 0xcd, 0x41, 0x78, 0xc4, 0x3d,
	0x8f, 0x41, 0x21, 0x44, 0x13, 0xdd, 0xcb, 0x8d, 0xca, 0xfa, 0xc1, 0xc0, 0xb1, 0x24, 0x5b, 0xc9,
	0x18, 0xbb, 0x36, 0xb8, 0x48, 0x5d, 0xa7, 0xb1, 0x66, 0xe2, 0x2f, 0xf9, 0x17, 0x06, 0x4e, 0x94,
	0x2d, 0x81, 0x50, 0x50, 0x69, 0x62, 0xf7, 0x76, 0x47, 0x6a, 0x6f, 0x51, 0xbb, 0xb0, 0x53, 0x9a,
	0xca, 0x8b, 0xec, 0xe0, 0x91, 0xf7, 0x9d, 0xc1, 0x23, 0x7d, 0x77, 0x81, 0x72, 0xfa, 0x62, 0x0a,
	0xda, 0x9f, 0xdd, 0xf4, 0x47, 0x4e, 0xe8, 0x67, 0xe0, 0xd7, 0xa8, 0x0d, 0x1b, 0xdf, 0x72, 0x99,
	0x84, 0x84, 0x3a, 0x10, 0x9c, 0x2f, 0x6f, 0x61, 0xe7, 0xc6, 0x3f, 0x65, 0x12, 0x22, 0xc2, 0xf7,
	0x91, 0xcc, 0x6c, 0xc2, 0xa6, 0x58, 0x39, 0x1c, 0x44, 0xf9, 0xff, 0x83, 0xb8, 0x9f, 0xdd, 0x8f,
	0x14, 0x3d, 0x49, 0xe2, 0x99, 0x8e, 0x5a, 0xff, 0x1c, 0x18, 0x9f, 0xa1, 0xea, 0xec, 0xd3, 0x68,
	0x64, 0x18, 0x63, 0x63, 0xdc, 0x2c, 0x61, 0x84, 0x2a, 0xaf, 0x5f, 0x4d, 0xa6, 0xc6, 0xb8, 0xa9,
	0x0c, 0x7e, 0x96, 0x51, 0xd5, 0xd8, 0x66, 0x85, 0x3f, 0xa0, 0x7a, 0xfe, 0xd6, 0xe1, 0xf3, 0x5c,
	0x8e, 0x7b, 0xbe, 0x93, 0xce, 0xc5, 0xc1, 0x7e, 0x82, 0xa3, 0x95, 0xf0, 0x35, 0xaa, 0xe5, 0x80,
	0xf0, 0xe3, 0xfd, 0x93, 0xd9, 0x1a, 0x9e, 0x1f, 0x6a, 0x67, 0x7e, 0x3b, 0xc4, 0xf8, 0xe0, 0xfb,
	0x10, 0xf3, 0xc3, 0xdc, 0x87, 0x58, 0x48, 0x4c, 0x2b, 0x5d, 0x0d, 0xbf, 0x3e, 0x5f, 0x31, 0x70,
	0x42, 0x5b, 0x9f, 0x73, 0xaf, 0xcf, 0x3c, 0x2f, 0x04, 0x62, 0x33, 0x97, 0xc1, 0xcd, 0x25, 0xe3,
	0xfd, 0x35, 0x09, 0x5d, 0xb8, 0x74, 0x99, 0x2d, 0x48, 0x3f, 0x79, 0xae, 0x44, 0x30, 0xb7, 0x2b,
	0xf1, 0x1f, 0x64, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x19, 0xf3, 0xa2, 0xab, 0x04, 0x00,
	0x00,
}
