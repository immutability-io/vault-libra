// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// `TransactionInfo` is the object we store in the transaction accumulator. It
// consists of the transaction as well as the execution result of this
// transaction. This are later returned to the client so that a client can
// validate the tree
type TransactionInfo struct {
	// Hash of the signed transaction that is stored
	SignedTransactionHash []byte `protobuf:"bytes,1,opt,name=signed_transaction_hash,json=signedTransactionHash,proto3" json:"signed_transaction_hash,omitempty"`
	// The root hash of Sparse Merkle Tree describing the world state at the end
	// of this transaction
	StateRootHash []byte `protobuf:"bytes,2,opt,name=state_root_hash,json=stateRootHash,proto3" json:"state_root_hash,omitempty"`
	// The root hash of Merkle Accumulator storing all events emitted during this
	// transaction.
	EventRootHash []byte `protobuf:"bytes,3,opt,name=event_root_hash,json=eventRootHash,proto3" json:"event_root_hash,omitempty"`
	// The amount of gas used by this transaction.
	GasUsed              uint64   `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionInfo) Reset()         { *m = TransactionInfo{} }
func (m *TransactionInfo) String() string { return proto.CompactTextString(m) }
func (*TransactionInfo) ProtoMessage()    {}
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19ed5f4c459e84f4, []int{0}
}

func (m *TransactionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionInfo.Unmarshal(m, b)
}
func (m *TransactionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionInfo.Marshal(b, m, deterministic)
}
func (m *TransactionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfo.Merge(m, src)
}
func (m *TransactionInfo) XXX_Size() int {
	return xxx_messageInfo_TransactionInfo.Size(m)
}
func (m *TransactionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfo proto.InternalMessageInfo

func (m *TransactionInfo) GetSignedTransactionHash() []byte {
	if m != nil {
		return m.SignedTransactionHash
	}
	return nil
}

func (m *TransactionInfo) GetStateRootHash() []byte {
	if m != nil {
		return m.StateRootHash
	}
	return nil
}

func (m *TransactionInfo) GetEventRootHash() []byte {
	if m != nil {
		return m.EventRootHash
	}
	return nil
}

func (m *TransactionInfo) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func init() {
	proto.RegisterType((*TransactionInfo)(nil), "types.TransactionInfo")
}

func init() { proto.RegisterFile("transaction_info.proto", fileDescriptor_19ed5f4c459e84f4) }

var fileDescriptor_19ed5f4c459e84f4 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0xbb, 0xaa, 0xc2, 0x40,
	0x10, 0xc6, 0x71, 0xf6, 0x9c, 0x78, 0x61, 0x51, 0x02, 0x01, 0x35, 0x76, 0xc1, 0x42, 0x52, 0xd9,
	0x08, 0x3e, 0x83, 0xb6, 0x41, 0xeb, 0x65, 0x34, 0x93, 0x4b, 0x33, 0x13, 0x32, 0xa3, 0xe0, 0x7b,
	0xf9, 0x80, 0xc2, 0x06, 0x75, 0xdb, 0x6f, 0x7e, 0xff, 0x62, 0xec, 0x52, 0x7b, 0x20, 0x81, 0x9b,
	0xb6, 0x4c, 0xae, 0xa5, 0x8a, 0x77, 0x5d, 0xcf, 0xca, 0xc9, 0x48, 0x9f, 0x1d, 0xca, 0xe6, 0x65,
	0x6c, 0x7c, 0xfe, 0x89, 0x13, 0x55, 0x9c, 0x1c, 0xec, 0x4a, 0xda, 0x9a, 0xb0, 0x74, 0x61, 0xdb,
	0x80, 0x34, 0xa9, 0xc9, 0x4c, 0x3e, 0x2b, 0x16, 0xc3, 0x39, 0xe8, 0x8e, 0x20, 0x4d, 0xb2, 0xb5,
	0xb1, 0x28, 0x28, 0xba, 0x9e, 0x59, 0x07, 0xff, 0xe7, 0xfd, 0xdc, 0xcf, 0x05, 0xb3, 0x7e, 0x1c,
	0x3e, 0x90, 0x34, 0x70, 0xff, 0x83, 0xf3, 0xf3, 0xd7, 0xad, 0xed, 0xb4, 0x06, 0x71, 0x77, 0xc1,
	0x32, 0x8d, 0x32, 0x93, 0x47, 0xc5, 0xa4, 0x06, 0xb9, 0x08, 0x96, 0xd7, 0xb1, 0x7f, 0x62, 0xff,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x47, 0xb7, 0x78, 0x8c, 0xde, 0x00, 0x00, 0x00,
}
